version: '3.8'

networks:
  kafkanetwork:
    driver: bridge
    
volumes:
  sqlserver2019data:

services:
  sqlserver2019:
    image: "mcr.microsoft.com/mssql/server:2019-latest" 
    ports:
      - "1433:1433"
    networks:
      - kafkanetwork
    environment:
      - "ACCEPT_EULA=Y"
      - "SA_PASSWORD=<YourNewStrong@Passw0rd>"
      - "MSSQL_AGENT_ENABLED=True"
    volumes:
      - sqlserver2019data:/var/opt/mssql

  zookeeper:
    image: 'bitnami/zookeeper:latest'
    ports:
      - '2181:2181'
    networks: 
      - kafkanetwork
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  broker01:
    image: 'bitnami/kafka:latest'
    ports:
      - '29092:29092'
    networks: 
      - kafkanetwork
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://broker01:9092,PLAINTEXT_HOST://broker01:29092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://broker01:9092,PLAINTEXT_HOST://localhost:29092
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    depends_on:
      - zookeeper

  schema-registry:
    image: confluentinc/cp-schema-registry:6.0.0
    networks: 
      - kafkanetwork
    depends_on:
      - zookeeper
      - broker01
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'

  ksqldb-server:
    image: confluentinc/ksqldb-server:${CONFLUENT_VERSION}
    ports:
      - "8088:8088"
      - "8083:8083"
    networks: 
      - kafkanetwork
    depends_on:
      - broker01
      - schema-registry
    volumes:
     - "./debezium-connector-sqlserver/:/usr/share/kafka/plugins/"
    healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:8088/healthcheck"]
        interval: 30s
        timeout: 10s
        retries: 5
    environment:
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_BOOTSTRAP_SERVERS: broker01:9092
      KSQL_HOST_NAME: ksqldb-server
      KSQL_KSQL_SERVICE_ID: ksql-connect-cluster
      KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KSQL_KSQL_CONNECT_WORKER_CONFIG: "/etc/ksqldb/connect.properties"
      KSQL_CONNECT_BOOTSTRAP_SERVERS: 'broker01:9092'
      KSQL_CONNECT_REST_ADVERTISED_HOST_NAME: 'ksqldb-server'
      KSQL_CONNECT_REST_PORT: 8083
      KSQL_CONNECT_GROUP_ID: ksqldb-kafka-connect-group-01
      KSQL_CONNECT_CONFIG_STORAGE_TOPIC: _ksqldb-kafka-connect-group-01-configs
      KSQL_CONNECT_OFFSET_STORAGE_TOPIC: _ksqldb-kafka-connect-group-01-offsets
      KSQL_CONNECT_STATUS_STORAGE_TOPIC: _ksqldb-kafka-connect-group-01-status      

      KSQL_CONNECT_KEY_CONVERTER: "io.confluent.connect.avro.AvroConverter"
      KSQL_CONNECT_VALUE_CONVERTER: "io.confluent.connect.avro.AvroConverter"
      KSQL_CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KSQL_CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      #KSQL_CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"

      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      KSQL_CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: '1'
      KSQL_CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: '1'
      KSQL_CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: '1'
      KSQL_CONNECT_PLUGIN_PATH: '/usr/share/kafka/plugins/'

  kafdrop:
    image: obsidiandynamics/kafdrop:3.27.0
    environment:
      - KAFKA_BROKERCONNECT=broker01:9092
      - JVM_OPTS=-Xms32M -Xms64M
      - SERVER_SERVLET_CONTEXTPATH=/
    ports:
      - "9000:9000"
    networks: 
      - kafkanetwork
    depends_on:
      - broker01

  ksqldb-cli:
    image: confluentinc/ksqldb-cli:${CONFLUENT_VERSION}
    networks: 
      - kafkanetwork
    depends_on:
      - broker01
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true

  blazor.sample:
    image: ${DOCKER_REGISTRY-}blazorsample
    build:
      context: .
      dockerfile: Samples/Blazor.Sample/Dockerfile
    networks: 
      - kafkanetwork
    environment:
      ksqlDb__Url: "http://ksqldb-server:8088"
      ConnectionStrings__DefaultConnection: "Server=sqlserver2019,1433;User Id = SA;Password=<YourNewStrong@Passw0rd>;Initial Catalog = Sensors;MultipleActiveResultSets=true"
    depends_on:
      ksqldb-server:
        condition: service_healthy